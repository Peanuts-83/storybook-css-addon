{"version":3,"sources":["../packages/css-viewer-addon/src/hooks/useCssViewer.ts","../packages/css-viewer-addon/src/components/Tab.tsx","../packages/css-viewer-addon/src/manager.tsx"],"names":["useCssViewer","active","componentId","config","css","setCss","useState","useEffect","debugMode","baseName","regex","cssText","response","err","error","TabWrapper","styled","theme","TabInner","Tab","storyId","useStorybookState","setConfig","cvc","useParameter","useLayoutEffect","cssContent","e","React","Code","addons","api","types"],"mappings":"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","file":"manager.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { CssViewerConfig } from 'src/types';\n\n\nexport const useCssViewer = (active: boolean, componentId?: string, config?: CssViewerConfig) => {\n    const [css, setCss] = useState<string>(\"\");\n\n    useEffect(() => {\n        const fetchCss = async () => {\n            let debugMode = config?.debug || false\n            try {\n                if (!componentId) {\n                    throw new Error('no story id !');\n                } else if (!config) {\n                    throw new Error('no config available !')\n                } else if (!config.format) {\n                    throw new Error('no extension format available !')\n                } \n                let baseName: string = componentId\n                if (config.fileRegex) {\n                    const regex = new RegExp(config.fileRegex.in)\n                    if (regex.test(baseName)) {\n                        debugMode && console.log(`Regex [${JSON.stringify(config.fileRegex)}] applying to : ${baseName}`)\n                        baseName = baseName.replace(regex, config.fileRegex.out);\n                    } else {\n                        debugMode && console.warn(`Regex did not match: ${config.fileRegex.in}, storyId: ${componentId}`);\n                    }\n                } else {\n                    baseName = baseName.split('--')[0];\n                }\n                debugMode && console.log(`Style file name: ${baseName}.${config.format}`)\n                \n                let cssText = \"\";    \n                try {\n                    const response = await fetch(`./assets/stylesForPreview/${baseName}.${config.format}`);\n                    if (response.ok) {\n                        cssText = await response.text();\n                    }\n                } catch (err) {\n                    debugMode && console.warn(`Failed to fetch ./assets/stylesForPreview/${baseName}.${config.format}:`, err);\n                } \n                setCss(cssText);\n            } catch (error) {\n                debugMode && console.error(error);\n                setCss(\"No style available for this story.\");\n            }\n        };\n\n        fetchCss();\n        \n    }, [componentId, active, config]);\n\n    return css;\n};","import React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { Code } from \"storybook/internal/components\";\nimport { useParameter, useStorybookState } from \"storybook/internal/manager-api\";\nimport { styled } from \"storybook/internal/theming\";\nimport { useCssViewer } from '../hooks/useCssViewer';\nimport { CssViewerConfig } from 'src/types';\n\ninterface TabProps {\n  active: boolean;\n}\n\nconst TabWrapper = styled.div(({ theme }) => ({\n  background: theme.background.content,\n  minHeight: \"100vh\",\n  boxSizing: \"border-box\",\n  position: \"absolute\",\n  top: 0,\n}));\n\nconst TabInner = styled.div({\n  maxWidth: 768,\n  marginLeft: \"auto\",\n  marginRight: \"auto\",\n  marginTop: \"4rem\"\n});\n\nexport const Tab: React.FC<TabProps> = ({active}) => {\n  const { storyId } = useStorybookState(); // Get active story ID  \n  const [config, setConfig] = useState<CssViewerConfig|null>(null)\n  const cvc: CssViewerConfig = useParameter(\"cssViewerConfig\")\n  \n  useLayoutEffect(() => {\n    if (cvc) {\n      setConfig(cvc)\n    }\n  }, [cvc, storyId])\n  \n  let cssContent = useCssViewer(active, storyId, config); // Get style\n  \n  if (!active || config?.ignore?.some(e => storyId.includes(e))) {\n    return null;\n  }\n\n  return (\n    <TabWrapper>\n      <TabInner>\n        {cssContent ? (\n          <Code>{cssContent}</Code>\n        ) : (\n          <p>No style available for this story.</p>\n        )}\n      </TabInner>\n    </TabWrapper>\n  );\n};\n","import React from \"react\";\nimport { addons, types } from \"storybook/internal/manager-api\";\nimport { Tab } from './components/Tab';\n\n\n// Register the addon\naddons.register(\"CSS-viewer\", (api) => {\n  addons.add(\"CSS-viewer/tab\", {\n    type: types.TAB,\n    title: \"CSS\",\n    render: ({ active }) => <Tab active={active || false} />\n  });\n});\n"]}